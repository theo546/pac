#!/bin/bash

# pac tool by theo546: https://github.com/theo546
# please, credit me if you use my tool, enjoy :D
# https://github.com/theo546/pac - GPLv3

version="1.0.7" # changelog: https://github.com/theo546/pac/blob/master/README.md
log=$HOME/.cache/pac/logs/log-$(date +%Y-%m-%d_%H-%M-%S).txt # log directory

if [ ! -f ~/.cache/pac/pac.config ]; then
	checkos=1; else . ~/.cache/pac/pac.config; fi # change checkos to 0 if error when starting
if [ $checkos == 1 ] 2> /dev/null; # i add this here to prevent the creation of the cache folder if not on Archlinux.
   then
	if [ ! -f /etc/arch-release ];
	   then
		echo "Error: You don't seem to be on Archlinux"
		exit
	   fi
   fi
if [ ! -d ~/.cache/pac/logs ] || [ ! -d ~/.cache/pac/cache ];
   then
	mkdir -p ~/.cache/pac/logs
	mkdir -p ~/.cache/pac/cache
	sleep 0.1
   fi

(
if [ ! -f /usr/bin/pacman ];
   then
	echo "Error: Pacman is not found, please install it"
	exit
   fi
if [ ! -f /usr/bin/git ];
   then
	echo "Error: Git is not found, starting installation..."
	sudo pacman -S git
	if [ ! -f /usr/bin/git ];
	   then
		echo "Error: Git is still not installed."
		exit
	   else echo "Git is now installed!"
	   fi
   fi
if [ ! -f /usr/bin/jshon ];
   then
	echo "Error: Jshon is not found, starting installation..."
	sudo pacman -S jshon
	if [ ! -f /usr/bin/jshon ];
	   then
		echo "Error: Jshon is still not installed."
		exit
	   else echo "Jshon is now installed!"
	   fi
   fi
if [ ! -f ~/.cache/pac/pac.config ];
   then
	echo "checkos=1 # put this on 0 if this fail and you are really on Archlinux." > ~/.cache/pac/pac.config
	echo "aurautoupdate=1 # change this to 0 to disable auto update of the aur package when you do 'pac u'." >> ~/.cache/pac/pac.config
	echo "autoupdate=1 # change this to 0 to disable auto update of pac when you do 'pac u'." >> ~/.cache/pac/pac.config
	echo "tmpdirectory="/tmp" # change this only if you can't write in the /tmp directory." >> ~/.cache/pac/pac.config
	echo "moveaur=2 # change this to 2 to select evertime where you wan't to download the update, 1 to move them without askin to cache folder and 0 to remove them after install without asking." >> ~/.cache/pac/pac.config
	echo "noconfirm=2 # change this to 2 to select evertime the noconfirm argument, 1 to add the noconfirm argument without asking and 0 to remove it without asking." >> ~/.cache/pac/pac.config
	echo "editor=3 # editor when inspecting aur package: Vim = 0, Leafpad = 1, SciTE = 2, vi = 3" >> ~/.cache/pac/pac.config
	echo "pacfolder="$HOME/.cache/pac" # don't touch!!!" >> ~/.cache/pac/pac.config
	sleep 0.1
	. ~/.cache/pac/pac.config
   fi
if [ ! -f ~/.cache/pac/db.txt ] || [ ! -f ~/.cache/pac/pkg.txt ];
   then
	touch ~/.cache/pac/db.txt
	touch ~/.cache/pac/pkg.txt
   fi
# check config
if [ $pacfolder ==  ] 2> /dev/null;
   then
	echo "pacfolder="$HOME/.cache/pac" # don't touch!!!" >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ ! -d $pacfolder ];
   then
	sed -i "s|$pacfolder|$HOME/.cache/pac|g" ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ ! -d $tmpdirectory ];
   then
	sed -i "s|$tmpdirectory|/tmp|g" ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $checkos ==  ] 2> /dev/null;
   then
	echo "checkos=1 # put this on 0 if this fail and you are really on Archlinux." >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $aurautoupdate ==  ] 2> /dev/null;
   then
	echo "aurautoupdate=1 # change this to 0 to disable auto update of the aur package when you do 'pac u'." >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $autoupdate ==  ] 2> /dev/null;
   then
	echo "autoupdate=1 # change this to 0 to disable auto update of pac when you do 'pac u'." >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $moveaur ==  ] 2> /dev/null;
   then
	echo "moveaur=2 # change this to 2 to select evertime where you wan't to download the update, 1 to move them without askin to cache folder and 0 to remove them after install without asking." >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $noconfirm ==  ] 2> /dev/null;
   then
	echo "noconfirm=2 # change this to 2 to select evertime the noconfirm argument, 1 to add the noconfirm argument without asking and 0 to remove it without asking." >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
if [ $editor ==  ] 2> /dev/null;
   then
	echo "editor=3 # editor when inspecting aur package: Vim = 0, Leafpad = 1, SciTE = 2, vi = 3" >> ~/.cache/pac/pac.config
	. ~/.cache/pac/pac.config
	sleep 0.1
   fi
# check editor
if [ ! -f /usr/bin/vim ]; then sed -i "s|editor=0|editor=3|g" ~/.cache/pac/pac.config; . ~/.cache/pac/pac.config; fi
if [ ! -f /usr/bin/leafpad ]; then sed -i "s|editor=1|editor=3|g" ~/.cache/pac/pac.config; . ~/.cache/pac/pac.config; fi
if [ ! -f /usr/bin/scite ]; then sed -i "s|editor=2|editor=3|g" ~/.cache/pac/pac.config; . ~/.cache/pac/pac.config; fi
if [ $editor == 0 ]; then editor1=vim; fi; if [ $editor == 1 ]; then editor1=leafpad; fi
if [ $editor == 2 ]; then editor1=scite; fi; if [ $editor == 3 ]; then editor1=vi; fi
# delete temp directory of pac if exist
rm -rf $tmpdirectory/*-pacAUR 2> /dev/null
# aur function
IPpkgname="";IPpkgdir="";IPrm="";IPreturn="";IPnoconfirm=""
function InstallPackage() {
if [ $1 == 0 ];
   then
	echo "An error occurred, please try again."
   fi
if [ ! -f PKGBUILD ];
   then
	echo "Error: PKGBUILD doesn't exist!"
	if [ $IPrm == "rm" ];
	   then
		if [ $1 == 3 ];
		   then
			rm -rf $IPpkgdir 2> /dev/null
			return
		   fi
		rm -rf $IPpkgdir 2> /dev/null
	   fi
	exit
   fi
if [ $1 == 1 ];
   then
	while true; do
	  echo
	  read -p "This is an AUR downloaded package, do you wan't to inspect the PKGBUILD before installing it (':q' to quit vi/vim)? Y(es) or N(o)? " opt
	  case $opt in
	    y|Y|yes|Yes)
	      /usr/bin/$editor1 PKGBUILD 2> /dev/null
	      break
	      ;;
	    n|N|no|No)
	      echo "Ok, let's skip the PKGBUILD inspection!"
	      break
	      ;;
	  esac
	done
	if [ $IPreturn == "r" ] 2> /dev/null;
	then
		return
	fi
	InstallPackage 2
   fi
if [ $1 == 2 ];
   then
	while true; do
		echo
		read -p "Do you wan't to install $IPpkgname? Y(es) or N(o)? " opt
		case $opt in
		    y|Y|yes|Yes)
		      echo "All right, let's go!"
		      InstallPackage 3
		      break
		      ;;
		    n|N|no|No)
		      echo "Aborting..."
		      if [ $IPrm == "rm" ] 2> /dev/null;
		         then
				rm -rf $IPpkgdir 2> /dev/null
			 fi
		      exit
		      ;;
		esac
	done
   fi
if [ $1 == 3 ];
   then
	makepkg -si $IPnoconfirm
	if [ "$(pacman -Qq $IPpkgname 2> /dev/null)" != "$IPpkgname" ];
	   then
		echo "Error: the package has not been installed."
		exit
	   fi
	getverpkgtxt=$(grep -rF "PKGBUILD" -e "pkgver=" | tr -d '"' | tr -d "'")
	getverpkgtxt2=$(sed -e 's#.*=\(\)#\1#' <<< "$getverpkgtxt")
	getrelpkgtxt=$(grep -rF "PKGBUILD" -e "pkgrel=" | tr -d '"' | tr -d "'")
	getrelpkgtxt2=$(sed -e 's#.*=\(\)#\1#' <<< "$getrelpkgtxt")
	if [ $getrelpkgtxt2 == ] 2> /dev/null;
	   then
		verrel=$getverpkgtxt2
		else verrel=$getverpkgtxt2-$getrelpkgtxt2
	   fi
	if [ $IPrm == "rm" ] 2> /dev/null;
	   then
		rm -rf $IPpkgdir 2> /dev/null
	   fi
	pacmancheck="$(pacman -Q $IPpkgname 2> /dev/null)"
	if [ "$pacmancheck" != "$IPpkgname $verrel" ];
	   then
		echo "Warning: the installed package has a different version than AUR downloaded package."
		echo "(installed: $pacmancheck, expected: $IPpkgname $verrel)"
		$verrel="$pacmancheck"
		warn=1
	   else warn=0
	   fi
	linedb2=$(awk "/$IPpkgname/{ print NR; exit }" $pacfolder/pkg.txt)
	if [ ! $linedb2 == "" ];
	   then
		sed -i "$linedb2 d" $pacfolder/pkg.txt
	   fi
	echo "$IPpkgname $verrel" >> $pacfolder/pkg.txt
	CheckDb
	if [ $warn == 0 ]; then echo "$IPpkgname has been successfully installed."; fi
   fi
}
WriteDB() {
linedb=$(awk "/$1/{ print NR; exit }" $pacfolder/db.txt)
getver=$(grep -rF "$pacfolder/cache/$2-$1/PKGBUILD" -e "pkgver=" | tr -d '"' | tr -d "'")
getver2=$(sed -e 's#.*=\(\)#\1#' <<< "$getver")
getrel=$(grep -rF "$pacfolder/cache/$2-$1/PKGBUILD" -e "pkgrel=" | tr -d '"' | tr -d "'")
getrel2=$(sed -e 's#.*=\(\)#\1#' <<< "$getrel")
dbdir=$pacfolder/db.txt
if [ ! $linedb == "" ];
   then
	sed -i "$linedb d" $dbdir
   fi
if [ $getrel2 == ] 2> /dev/null;
   then
	verrel=$getver2
   else verrel=$getver2-$getrel2
   fi
echo "$1 $pacfolder/cache/$2-$1 $verrel" >> $pacfolder/db.txt
}
CheckDb() { 
Chk; Chk2 
}
Chk() {
numberline=$(wc -l < $pacfolder/db.txt)
COUNTER=1; BLANK_LINE=0
let numberline=numberline+2
while [  $COUNTER -lt $numberline ];
do
	linepkgstringdir=$(sed "$COUNTER q;d" $pacfolder/db.txt)
	packagedirectory=$(echo $linepkgstringdir | cut -d " " -f 2)
	IGN=0
	if [ "$packagedirectory" == "" ] 2> /dev/null; then
		let BLANK_LINE=BLANK_LINE+1
		IGN=1
		sed -i "$COUNTER d" $pacfolder/db.txt
		if [ $BLANK_LINE == 25 ] && [ $1 == "2" ] 2> /dev/null; then return; fi
		if [ $BLANK_LINE == 25 ]; then Chk 2; return; fi
		if [ $COUNTER != 1 ]; then let COUNTER=COUNTER-1; fi
	   fi
	if [ ! -d "$packagedirectory" ] && [ $IGN == 0 ] 2> /dev/null;
	   then
		sed -i "$COUNTER d" $pacfolder/db.txt
		if [ $COUNTER != 1 ]; then let COUNTER=COUNTER-1; IGN=1; fi
	   fi
	if [ $IGN == 0 ]; then let COUNTER=COUNTER+1;fi
done
}
Chk2() {
numberline2=$(wc -l < $pacfolder/pkg.txt)
COUNTER2=1; BLANK_LINE2=0
let numberline2=numberline2+2
while [  $COUNTER2 -lt $numberline2 ];
do
	linepkgstring=$(sed "$COUNTER2 q;d" $pacfolder/pkg.txt)
	packagename=$(echo $linepkgstring | cut -d " " -f 1)
	pacmanchk=$(pacman -Qq $packagename 2> /dev/null)
	IGN2=0
	if [ "$packagename" == "" ] 2> /dev/null; then
		let BLANK_LINE2=BLANK_LINE2+1
		IGN2=1
		sed -i "$COUNTER2 d" $pacfolder/pkg.txt
		if [ $BLANK_LINE2 == 25 ] && [ $1 == "2" ] 2> /dev/null; then return; fi
		if [ $BLANK_LINE2 == 25 ]; then Chk2 2; return; fi
		if [ $COUNTER2 != 1 ]; then let COUNTER2=COUNTER2-1; fi
	   fi
	if [ "$pacmanchk" != "$packagename" ] && [ $IGN2 == 0 ] 2> /dev/null;
	   then
		sed -i "$COUNTER2 d" $pacfolder/pkg.txt
		if [ $COUNTER2 != 1 ]; then let COUNTER2=COUNTER2-1; IGN2=1; fi
	   fi
	if [ $IGN2 == 0 ]; then let COUNTER2=COUNTER2+1;fi
done
}
###
if [ -z $1 ];
   then
	echo "pac $version by theo546 - use 'pac help' to see the help!"
	exit
   fi
if [ $1 == "help" ];
   then
	echo "    _       "
	echo "   |_) _  _ "
	echo "   |  (_|(_ "
	echo
	echo "   'pac PackageName' to install a package."
	echo "   'pac u (1)' to start a system update. (use 1 to skip Pacman update)"
	echo "   'pac ud' to update the Pacman database."
	echo "   'pac i [Directory of Package]' to install a 'tar.xz' package."
	echo "   'pac r PackageName' to delete a package."
	echo "   'pac cc' to clear Pacman cache."
	echo "   'pac aur AURPackageName (Directory)' to install an AUR package."
	echo "   'pac is AURPackageName' to inspect a PKGBUILD of an AUR package."
	echo "   'pac s' to search a package in Pacman and AUR."
	echo "   'pac -Argument' to use Pacman with custom argument. (ex: pac -Sy)"
	echo "   'pac chk' to check 'db.txt' and 'pkg.txt'"
	echo "   'pac set' to set the configuration of pac."
	echo "   'pac cfg' to get pac configuration info."
	echo "   pac tool $version by theo546; https://github.com/theo546/pac - GPLv3"
	echo
	exit
   fi
if [ $1 == "cfg" ];
   then
	editorname="vi"
	if [ "$editor" == 0 ]; then editorname="Vim"; fi
	if [ "$editor" == 1 ]; then editorname="Leafpad"; fi
	if [ "$editor" == 2 ]; then editorname="SciTE"; fi
	echo
	echo "  pac configuration, change with 'pac set'"
	echo
	echo "  checkos = $checkos -- aurautoupdate = $aurautoupdate -- autoupdate = $autoupdate"
	echo "  moveaur = $moveaur -- noconfirm = $noconfirm -- editor = $editor ($editorname) -- version = $version"
	echo
	echo "  pacfolder = $pacfolder - tmpdirectory = $tmpdirectory"
	echo
	exit
   fi
if [ $1 == "u" ];
   then
	if [ "$2" != "1" ] && [ "$3" != "1" ] 2> /dev/null; then sudo pacman -Syu $2; fi
	if [ $autoupdate == 1 ];
	   then
	   wget -q --tries=10 --timeout=20 --spider https://raw.githubusercontent.com/; if [[ $? -eq 0 ]]; then skippacupdate=0; else skippacupdate=1; echo "raw.githubusercontent.com is unreachable, skipping pac update..."; fi
	   if [ $skippacupdate == 0 ];
	      then
		echo
		echo -n "Checking update for pac..."
		content=$(wget https://raw.githubusercontent.com/theo546/pac/master/pac/version -q -O -)
		if [ $content != $version ];
		   then
			rdname=$tmpdirectory/$RANDOM-pac
			echo " New update for pac found! (c: $version, u: $content)"
			wget https://raw.githubusercontent.com/theo546/pac/master/pac/pac -q -O $rdname
			if [ ! -f $rdname ];
			   then
				echo "Error: update fail, the file can't be downloaded"
				rm $rdname 2> /dev/null
				exit
			   fi
			echo -n "Checking checksum of the new version..."
			sha512=$(wget https://raw.githubusercontent.com/theo546/pac/master/pac/sha512sum -q -O -)
			sha512dl=$(sha512sum "$rdname" | cut -d ' ' -f 1)
			if [ $sha512 == ] 2> /dev/null;
			   then
				echo " Error: can't get the checksum, aborting..."
				rm $rdname
				exit
			   fi
			if [ $sha512 != $sha512dl ];
			   then
				echo " Error: update failed, file is corrupt/modified, aborting..."
				echo "Checksum of the update: $sha512"
				echo "Checksum of the downloaded file: $sha512dl"
				rm $rdname
				exit
			   else sudo rm /usr/bin/pac; sudo mv $rdname /usr/bin/pac; sudo chmod +x /usr/bin/pac
			fi
			echo " [OK]"; echo "Update successfully checked and installed!"; pac u $2 1; exit
			else echo " No update found!"
		fi
	      fi
	   fi
	if [ $aurautoupdate == 1 ];
	   then
	   wget -q --tries=10 --timeout=20 --spider https://aur.archlinux.org/; if [[ $? -eq 0 ]]; then skipaur=0; else skipaur=1; echo "aur.archlinux.org is unreachable, skipping AUR update..."; fi
	   if [ $skipaur == 0 ];
	      then
		if [ $moveaur == 2 ];
		   then
			while true; do
				echo
				read -p "Do you wan't to download the AUR package in $pacfolder/cache? Y(es) or N(o)? " opt
				case $opt in
				    y|Y|yes|Yes)
				      echo "All right, they are moved to the cache folder."
				      moveaur=1
				      break
				      ;;
				    n|N|no|No)
				      echo "All right, they will be removed after installation"
				      moveaur=0
				      break
				      ;;
				esac
			done
		   fi
		if [ $noconfirm == 2 ];
		   then
			while true; do
				echo
				read -p "Do you wan't to use the '--noconfirm' argument to install quickly the update(you still need to inspect the PKGBUILD)? Y(es) or N(o)? " opt
				case $opt in
				    y|Y|yes|Yes)
				      echo "All right, '--noconfirm' argument added, checking for update now."
				      noconfirm="--noconfirm"
				      break
				      ;;
				    n|N|no|No)
				      echo "Ok, no '--noconfirm' argument, checking for update now."
				      break
				      ;;
				esac
			done
		   else if [ $noconfirm == 1 ]; then noconfirm="--noconfirm"; else if [ $noconfirm == 0 ]; then noconfirm=""; fi; fi
		   fi
		echo
		CheckDb
		sleep 0.1
		numberline=$(wc -l < $pacfolder/pkg.txt)
		updatefound=0
		for i in $(seq $numberline)
		do
		   linepkgstring=$(sed "$i q;d" $pacfolder/pkg.txt)
		   packagename=$(echo $linepkgstring | cut -d " " -f 1); versionstring=$(echo $linepkgstring | cut -d " " -f 2)
		   if [ $moveaur == 1 ];
		      then
			randomname=$RANDOM$RANDOM$RANDOM;newfolder=$pacfolder/cache/$randomname-$packagename
			else newfolder=$tmpdirectory/$RANDOM$RANDOM$RANDOM-pacAUR; cdtofolder=$packagename; rm="rm"
		      fi
		   mkdir $newfolder; cd $newfolder
		   wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$packagename -q -O $newfolder/PKGBUILD
		   if [ ! -s $newfolder/PKGBUILD ] 2> /dev/null;
			then
				abort=1; rm -rf $newfolder
			else abort=0
			fi
		   if [ $abort == 0 ];
		      then
			   getverpkgtxt=$(grep -rF "PKGBUILD" -e "pkgver=" | tr -d '"' | tr -d "'")
			   getverpkgtxt2=$(sed -e 's#.*=\(\)#\1#' <<< "$getverpkgtxt")
			   getrelpkgtxt=$(grep -rF "PKGBUILD" -e "pkgrel=" | tr -d '"' | tr -d "'")
			   getrelpkgtxt2=$(sed -e 's#.*=\(\)#\1#' <<< "$getrelpkgtxt")
			   if [ $getrelpkgtxt2 == ] 2> /dev/null;
				then
					verrel=$getverpkgtxt2
				else verrel=$getverpkgtxt2-$getrelpkgtxt2
				fi
			   if [ $versionstring != $verrel ] 2> /dev/null;
			      then
				echo "New update for $packagename found! Installing it..."
				echo "(current: $versionstring, update: $verrel)"
				let updatefound=1
				rm PKGBUILD
				if [ -f PKGBUILD ]; then echo "Error: PKGBUILD can't be deleted"; rm -rf $newfolder 2> /dev/null; exit; fi
				git clone https://aur.archlinux.org/$packagename.git
				if [ $moveaur == 1 ]; then mv $packagename/* $newfolder/$cdtofolder; fi
				cd $newfolder/$cdtofolder
				if [ ! -f PKGBUILD ]; then echo "Error: PKGBUILD doesn't exist!"; rm -rf $newfolder 2> /dev/null; exit; fi
				if [ $moveaur == 1 ]; then WriteDB $packagename $randomname; fi
				IPpkgname="$packagename";IPpkgdir="$newfolder";IPrm="$rm";IPnoconfirm="$noconfirm";InstallPackage 1
				if [ $moveaur == 0 ]; then rm -rf $newfolder; fi
			      else rm -rf $newfolder
			      fi
		      fi
		done
		if [ $updatefound == 1 ]; then CheckDb; echo "AUR package update done!"; else echo "No update for AUR package found!"; echo; fi
		# aur https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=<package>
	      fi
	   fi
	exit
   fi
if [ $1 == "ud" ];
   then
	sudo pacman -Sy
	exit
   fi
if [ $1 == "i" ];
   then
	if [ $2 == ] 2> /dev/null;
	   then
		echo "Error: nothing to install."
		exit
	   fi
	if [ ! -f $2 ] 2> /dev/null; then echo "Error: '$2' doesn't exist."; exit; fi; if [ ! -f $3 ] 2> /dev/null; then echo "Error: '$3' doesn't exist."; exit; fi
	if [ ! -f $4 ] 2> /dev/null; then echo "Error: '$4' doesn't exist."; exit; fi; if [ ! -f $5 ] 2> /dev/null; then echo "Error: '$5' doesn't exist."; exit; fi
	if [ ! -f $6 ] 2> /dev/null; then echo "Error: '$6' doesn't exist."; exit; fi; if [ ! -f $7 ] 2> /dev/null; then echo "Error: '$7' doesn't exist."; exit; fi
	if [ ! -f $8 ] 2> /dev/null; then echo "Error: '$8' doesn't exist."; exit; fi; if [ ! -f $9 ] 2> /dev/null; then echo "Error: '$9' doesn't exist."; exit; fi
	echo "If you are installing (a) package from AUR, use 'pac aur PackageName' instead please, it's better for update."
	sudo pacman -U $2 $3 $4 $5 $6 $7 $8 $9
	CheckDb
	exit
   fi
if [ $1 == "r" ];
   then
	sudo pacman -R $2 $3 $4 $5 $6 $7 $8 $9
	CheckDb
	exit
   fi
if [ $1 == "cc" ];
   then
	sudo pacman -Sc
	exit
   fi
if [[ $1 == -* ]];
   then
	sudo pacman $*
	CheckDb
	exit
   fi
if [ $1 == "s" ];
   then
	if [ $2 == ] 2> /dev/null;
	   then
		echo "Error: nothing to search."
		exit
	   fi
	result=$(pacman -Ss ${2^})
	if [ $result == ] 2> /dev/null;
	   then
		echo -n
	   else echo "$result" 
	   fi
	wget -q --tries=10 --timeout=20 --spider https://aur.archlinux.org/; if [[ ! $? -eq 0 ]]; then echo "aur.archlinux.org is unreachable, aborting AUR search..."; exit; fi
	rpc=$(wget "https://aur.archlinux.org/rpc.php?type=search&arg=$2" -q -O -)
	resultcount=$(echo "$rpc" | jshon -e resultcount -u)
	if [ $resultcount == 0 ]; then exit; fi
	randomdirectorysearch=$tmpdirectory/$RANDOM$RANDOM$RANDOM-pacAUR; mkdir $randomdirectorysearch; cd $randomdirectorysearch
	echo "$rpc" | jshon -e results -a -e Name -u > $randomdirectorysearch/name
	echo "$rpc" | jshon -e results -a -e Version -u > $randomdirectorysearch/version
	echo "$rpc" | jshon -e results -a -e Description -u > $randomdirectorysearch/description
	let resultcount=resultcount+1; COUNTER3=1
	while [  $COUNTER3 -lt $resultcount ];
	do
		echo -n aur/
		resultn=$(sed "$COUNTER3 q;d" "$randomdirectorysearch/name"); echo -n $resultn
		result2=$(sed "$COUNTER3 q;d" "$randomdirectorysearch/version"); echo -n " $result2"
		if [ "$(pacman -Qq $resultn 2> /dev/null)" == "$resultn" ];
		   then
			echo " [installed]"
		   else echo
		   fi
		result2=$(sed "$COUNTER3 q;d" "$randomdirectorysearch/description")
		if [ $result2 == ] 2> /dev/null;
		   then
			echo "    No description."
		   else echo "    $result2"
		   fi
		let COUNTER3=COUNTER3+1
	done
	cd $tmpdirectory; rm -rf $randomdirectorysearch
	exit
   fi
if [ $1 == "chk" ];
   then
	echo -n "Verification of the database (pkg.txt and db.txt)..."
	CheckDb
	echo " [OK]"
	exit
   fi
if [ $1 == "set" ];
   then
	if [ -z $2 ];
	   then
		echo
		echo "  pac configuration editor, possible choices:"
		echo
		echo "  checkos (0, 1) check if the OS is Archlinux, set to 0 to bypass"
		echo "  aurautoupdate (0, 1) enable auto update of aur package if set to 1"
		echo "  autoupdate (0, 1) enable auto update of pac if set to 1"
		echo "  tmpdirectory (directory) temp directory of pac"
		echo "  moveaur (0, 1, 2) if set to 2, ask everytime where to put aur package"
		echo "  noconfirm (0, 1, 2) if set to, 2 ask everytime to set noconfirm argument"
		echo "  editor (0, 1, 2, 3) editor: Vim = 0, Leafpad = 1, SciTE = 2, vi = 3"
		echo "  pacfolder (directory) pac directory, do not touch!!!"
		echo
		echo "  exemple: 'pac set autoupdate 0' to turn auto update of pac off"
		echo "  use 'pac cfg' to see actual configuration"
		echo
		exit
	   fi
	if [ -z $2 ] || [ -z $3 ];
	   then
		echo "Error: argument missing"
		exit
	   fi
	success="Successfully set '$2' to '$3'."
	if [ $2 == "checkos" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ]; then echo "Error: can't be other than 0 or 1"; exit; fi
		sed -i "s|checkos=$checkos|checkos=$3|g" ~/.cache/pac/pac.config; echo $success; exit
	   fi
	if [ $2 == "aurautoupdate" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ]; then echo "Error: can't be other than 0 or 1"; exit; fi
		sed -i "s|aurautoupdate=$aurautoupdate|aurautoupdate=$3|g" ~/.cache/pac/pac.config; echo $success; exit
	   fi
	if [ $2 == "autoupdate" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ]; then echo "Error: can't be other than 0 or 1"; exit; fi
		sed -i "s|autoupdate=$autoupdate|autoupdate=$3|g" ~/.cache/pac/pac.config; echo $success; exit
	   fi
	if [ $2 == "tmpdirectory" ];
	   then
		dirtmp=$(echo $3 | sed 's/\/*$//')
		if [ ! -d $3 ]; then echo "Error: directory doesn't exist! ($dirtmp)"; exit; fi
		rdm=$dirtmp/$RANDOM-pac; touch $rdm 2> /dev/null; if [ ! -f $rdm ]; then echo "Error: can't write to specified folder! ($dirtmp)"; exit; else rm $rdm; fi
		sed -i "s|tmpdirectory=$tmpdirectory|tmpdirectory=$dirtmp|g" ~/.cache/pac/pac.config; echo "Successfully set '$2' to '$dirtmp'."; exit
	   fi
	if [ $2 == "moveaur" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ] && [ "$3" != 2 ]; then echo "Error: can't be other than 0, 1 or 2"; exit; fi
		sed -i "s|moveaur=$moveaur|moveaur=$3|g" ~/.cache/pac/pac.config; echo $success; exit
	   fi
	if [ $2 == "noconfirm" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ] && [ "$3" != 2 ]; then echo "Error: can't be other than 0, 1 or 2"; exit; fi
		sed -i "s|noconfirm=$noconfirm|noconfirm=$3|g" ~/.cache/pac/pac.config; echo $success; exit
	   fi
	if [ $2 == "editor" ];
	   then
		if [ "$3" != 0 ] && [ "$3" != 1 ] && [ "$3" != 2 ] && [ "$3" != 3 ]; then echo "Error: can't be other than 0, 1, 2, or 3"; exit; fi
		editorname="vi"
		if [ "$3" == 0 ]; then if [ ! -f /usr/bin/vim ]; then echo "Error: Vim is not installed!"; exit; fi; editorname="Vim"; fi
		if [ "$3" == 1 ]; then if [ ! -f /usr/bin/leafpad ]; then echo "Error: Leafpad is not installed!"; exit; fi; editorname="Leafpad"; fi
		if [ "$3" == 2 ]; then if [ ! -f /usr/bin/scite ]; then echo "Error: SciTE is not installed!"; exit; fi; editorname="SciTE"; fi
		sed -i "s|editor=$editor|editor=$3|g" ~/.cache/pac/pac.config; echo "Successfully set '$2' to '$editorname'."; exit
	   fi
	if [ $2 == "pacfolder" ];
	   then
		dirtmp=$(echo $3 | sed 's/\/*$//')
		if [ ! -d $3 ]; then echo "Error: directory doesn't exist! ($dirtmp)"; exit; fi
		rdm=$dirtmp/$RANDOM-pac; touch $rdm 2> /dev/null; if [ ! -f $rdm ]; then echo "Error: can't write to specified folder! ($dirtmp)"; exit; else rm $rdm; fi
		sed -i "s|pacfolder=$pacfolder|pacfolder=$dirtmp|g" ~/.cache/pac/pac.config; echo "Successfully set '$2' to '$dirtmp'."; exit
	   fi
	echo "Error: wrong option '$2'"
	exit
   fi
if [ $1 == "is" ];
   then
	wget -q --tries=10 --timeout=20 --spider https://aur.archlinux.org/; if [[ ! $? -eq 0 ]]; then echo "aur.archlinux.org is unreachable, aborting..."; exit; fi
	newfolder=$tmpdirectory/$RANDOM$RANDOM$RANDOM-pacAUR
	mkdir $newfolder; cd $newfolder
	wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$2 -q -O $newfolder/PKGBUILD
	if [ ! -s $newfolder/PKGBUILD ] 2> /dev/null;
	   then
		echo "Error: the PKGBUILD is corrupted."
		exit
	   else
	   while [ 1 ];
	   do
	      /usr/bin/$editor1 PKGBUILD 2> /dev/null; break
	   done
	   fi
	rm -rf $newfolder
	exit
   fi
if [ $1 == "aur" ];
 then
   if [ $2 == ] 2> /dev/null;
      then
	echo "Error: nothing specified"
	exit
      fi
   if [ -z $3 ];
   then
	if [[ $(cat $pacfolder/db.txt) == *"$2"* ]];
	   then
		pkgcheck=$(grep -rnw "$pacfolder/db.txt" -e "$2")
		aurdl=$(echo $pkgcheck | cut -d " " -f 2)
		linedb=$(awk "/$2/{ print NR; exit }" $pacfolder/db.txt)
		dbdir=$pacfolder/db.txt
		if [ ! -d $aurdl ] || [ ! -f $aurdl/PKGBUILD ]; then 
			sed -i "$linedb d" $dbdir
			pac aur $2
			exit
		   fi
		while true; do
			echo
			read -p "Do you wan't to install the previously downloaded $aurdl? If not, a new one will be downloaded. Y(es) or N(o)? " opt
			case $opt in
			    y|Y|yes|Yes)
			      echo "Ok, let's install the downloaded one."
			      cd $aurdl
			      if [ $PWD != "$aurdl" ];
				then
					echo "Error: can't access the folder! ($aurdl)"
					exit
				fi
			      IPpkgname="$2"; InstallPackage 1
			      exit
			      ;;
			    n|N|no|No)
			      echo "Ok, a new download will be make for this package!"
			      break
			      ;;
			esac
		done
	   fi
	wget -q --tries=10 --timeout=20 --spider https://aur.archlinux.org/; if [[ ! $? -eq 0 ]]; then echo "aur.archlinux.org is unreachable, aborting AUR download..."; exit; fi
	randomtmp=$RANDOM$RANDOM$RANDOM
	randomfolder=$tmpdirectory/$randomtmp-pacAUR; mkdir $randomfolder
	cd $randomfolder
	if [ ! -d $randomfolder ];
	   then
		echo "Error: can't access the temp folder! ($randomfolder)"
		exit
	   fi
	git clone https://aur.archlinux.org/$2.git
	cd $2
	if [ $PWD != "$randomfolder/$2" ];
	   then
		echo "Error: can't access the downloaded folder! ($randomfolder)"
		rm -rf $randomfolder
		exit
	   fi
	IPpkgname="$2";IPpkgdir="$randomfolder";IPrm="rm";IPreturn="r"; InstallPackage 1
	while true; do
		echo
		read -p "Do you wan't the files to be moved to $pacfolder/cache/$randomtmp-$2? If not, it will be removed after the installation. Y(es) or N(o)? " opt
		case $opt in
		    y|Y|yes|Yes)
		      echo "Ok, the downloaded files will be moved to the cache directory."
		      mkdir $pacfolder/cache/$randomtmp-$2
		      mv $randomfolder/$2/* $pacfolder/cache/$randomtmp-$2
		      cd $pacfolder/cache/$randomtmp-$2
		      rm -rf $randomfolder
		      unset randomfolder
		      WriteDB $2 $randomtmp
		      break
		      ;;
		    n|N|no|No)
		      echo "Ok, the downloaded files will be removed after the installation."
		      break
		      ;;
		esac
	done
	IPpkgname="$2";IPpkgdir="$randomfolder";IPrm="rm"; InstallPackage 2
	exit
   else
	wget -q --tries=10 --timeout=20 --spider https://aur.archlinux.org/; if [[ ! $? -eq 0 ]]; then echo "aur.archlinux.org is unreachable, aborting AUR download..."; exit; fi
	dirtmp=$(echo $3 | sed 's/\/*$//')
	cd $dirtmp 2> /dev/null
	if [ $dirtmp != $PWD ];
	   then
		echo "Error: can't access $dirtmp!"
		exit
	   fi
	if [ -d $2 ];
	   then
		echo "Error: a folder with the same name as the requested package already exist!"
		exit
	   fi
	git clone https://aur.archlinux.org/$2.git
	dirtmp2=$(echo $dirtmp/$2)
	cd $2
	if [ $PWD != $dirtmp2 ];
	   then
		echo "Error: can't access the downloaded folder! ($dirtmp2)"
		exit
	   fi
	IPpkgname="$2"; InstallPackage 1
	exit
   fi
 fi
sudo pacman -S $*
) 2>&1 | tee -a $log